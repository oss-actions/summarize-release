"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startCommands = exports.stopCommands = exports.addMask = exports.endGroup = exports.group = exports.error = exports.warn = exports.warning = exports.notice = exports.debug = exports.annotation = void 0;
const crypto_1 = require("crypto");
const util_1 = require("util");
function output(command, commandArgs, format, args) {
    const cmdArgs = Object.entries(commandArgs).filter(([, value]) => value !== undefined);
    process.stdout.write(`::${command}${cmdArgs.length ? " " : ""}${cmdArgs}::${(0, util_1.formatWithOptions)({
        colors: true,
        depth: Infinity,
        maxArrayLength: Infinity,
        maxStringLength: Infinity,
    }, format, ...args)}\n`);
}
class Options {
    constructor(options) {
        this.options = options;
    }
}
function outputWithArgs(command, args, lastIsOptions) {
    let commandArgs;
    if (lastIsOptions &&
        args.length &&
        args[args.length - 1] instanceof Options) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-explicit-any
        commandArgs = args.pop().options;
    }
    else {
        commandArgs = {};
    }
    if (args.length && typeof args[0] === "string") {
        output(command, commandArgs, args[0], args.slice(1));
    }
    else {
        output(command, commandArgs, "%o".repeat(args.length), args);
    }
}
function annotation(args) {
    return new Options(args);
}
exports.annotation = annotation;
function debug(...args) {
    outputWithArgs("debug", args, false);
}
exports.debug = debug;
const notice = (...args) => outputWithArgs("notice", args, true);
exports.notice = notice;
const warning = (...args) => outputWithArgs("warning", args, true);
exports.warning = warning;
exports.warn = exports.warning;
const error = (...args) => outputWithArgs("warning", args, true);
exports.error = error;
const group = (title) => output("group", {}, "%s", [title]);
exports.group = group;
const endGroup = () => output("endgroup", {}, "", []);
exports.endGroup = endGroup;
const addMask = (value) => output("add-mask", {}, "%s", [value]);
exports.addMask = addMask;
const stopCommands = (id = (0, crypto_1.randomUUID)()) => (output("stop-commands", {}, "%s", [id]), id);
exports.stopCommands = stopCommands;
const startCommands = (id) => output(id, {}, "", []);
exports.startCommands = startCommands;
