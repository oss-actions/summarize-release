type CommandArgs = Record<string, string | number | boolean | undefined>;
declare class Options<T extends CommandArgs> {
    readonly options: T;
    constructor(options: T);
}
export declare function annotation(args: AnnotationOptions): Options<AnnotationOptions>;
export declare function debug(...args: unknown[]): void;
export interface AnnotationOptions extends CommandArgs {
    title?: string;
    file?: string;
    col?: number;
    endColumn?: number;
    line?: number;
}
export type Annotation = (...args: [...unknown[], Options<AnnotationOptions>] | [...unknown[]]) => void;
export declare const notice: Annotation;
export declare const warning: Annotation;
export declare const warn: Annotation;
export declare const error: Annotation;
export declare const group: (title: string) => void;
export declare const endGroup: () => void;
export declare const addMask: (value: string) => void;
export declare const stopCommands: (id?: string) => string;
export declare const startCommands: (id: string) => void;
export {};
