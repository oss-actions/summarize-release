/// <reference types="node" />
/// <reference types="node" />
import { type SpawnOptionsWithoutStdio, type ChildProcess } from "node:child_process";
import Callable from "./util/Callable";
import { WritableStream, ReadableStream } from "node:stream/web";
export interface Commandline {
    name: string;
    path: string | undefined;
    supports(os: string, arch: string): boolean;
    available(): boolean;
    buildExecCommand(script: string): string[];
}
export declare const Shell: Commandline;
export declare const Bash: Commandline;
export declare const PowerShell: Commandline;
export declare const Batch: Commandline;
export declare class FinishedProcess {
    readonly shell: Cash;
    readonly stdall: string;
    readonly stderr: string;
    readonly stdout: string;
    readonly code: number;
    constructor(shell: Cash, stdall: string, stderr: string, stdout: string, code: number);
}
export declare class AwaitableReadableStringStream extends ReadableStream<string> implements PromiseLike<string> {
    $shell: Cash;
    $proc: ChildProcess;
    $streams: ChildProcess["stdout"][];
    constructor(shell: Cash, proc: ChildProcess, streams: ChildProcess["stdout"][], underlyingSource: UnderlyingByteSource, strategy?: {
        highWaterMark?: number;
    });
    constructor(shell: Cash, proc: ChildProcess, streams: ChildProcess["stdout"][], underlyingSource: UnderlyingDefaultSource<string>, strategy?: QueuingStrategy<string>);
    constructor(shell: Cash, proc: ChildProcess, streams: ChildProcess["stdout"][], underlyingSource?: UnderlyingSource<string>, strategy?: QueuingStrategy<string>);
    then<TResult1 = string, TResult2 = never>(onfulfilled?: ((value: string) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
}
export declare class RunningProcess implements PromiseLike<FinishedProcess> {
    $shell: Cash;
    $proc: ChildProcess;
    $stdout: string;
    $stderr: string;
    $stdall: string;
    constructor(shell: Cash, proc: ChildProcess);
    readonly stdout: AwaitableReadableStringStream | undefined;
    readonly stderr: AwaitableReadableStringStream | undefined;
    readonly stdall: AwaitableReadableStringStream | undefined;
    readonly stdin: WritableStream<string> | undefined;
    write(input: string): Promise<void>;
    then<TResult1 = FinishedProcess, TResult2 = never>(onfulfilled?: ((value: FinishedProcess) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined): Promise<TResult1 | TResult2>;
}
export declare class Cash extends Callable<(template: TemplateStringsArray, ...args: unknown[]) => RunningProcess> {
    $commandline: Commandline;
    readonly spawnOptions: SpawnOptionsWithoutStdio;
    ignoreExitCode: boolean;
    constructor(commandline: Commandline);
    setShell(shell: Commandline): void;
    exec(script: string): RunningProcess;
}
export default Cash;
